{"version":3,"sources":["components/Header/index.js","services/api.js","pages/main/index.js","pages/product/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","api","axios","create","baseURL","Main","state","products","productInfo","page","loadProducts","a","get","response","data","docs","setState","prevPage","pageNumber","nextPage","pages","this","className","map","product","key","_id","title","description","to","disabled","onClick","Component","Product","props","match","params","href","url","Routes","basename","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAOeA,G,YAFA,kBAAM,4BAAQC,GAAG,eAAX,Y,uFCGNC,E,OALHC,EAAMC,OAChB,CACEC,QAAS,8CCEQC,G,kNAInBC,MACA,CACEC,SAAU,GACVC,YAAa,GACbC,KAAM,G,EAaRC,a,sBAAe,gDAAAC,EAAA,6DAAOF,EAAP,+BAAc,EAAd,SAEUR,EAAIW,IAAJ,yBAA0BH,IAFpC,OAEPI,EAFO,SAMoBA,EAASC,KAAlCC,EANK,EAMLA,KAASP,EANJ,wBAUb,EAAKQ,SACH,CACET,SAAUQ,EACVP,cACAC,SAdS,2C,EAmBfQ,SAAW,WACX,IAEUR,EAAS,EAAKH,MAAdG,KAGR,GAAa,IAATA,EAAJ,CAEA,IAAMS,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,EAIpBC,SAAW,WACX,MAEgC,EAAKb,MAA3BE,EAFV,EAEUA,YAAaC,EAFvB,EAEuBA,KAGrB,GAAIA,IAASD,EAAYY,MAAzB,CAEA,IAAMF,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,kEAlDlBG,KAAKX,iB,+BAiEP,MAE0CW,KAAKf,MAArCC,EAFV,EAEUA,SAAUC,EAFpB,EAEoBA,YAAaC,EAFjC,EAEiCA,KAE/B,OACE,yBAAKa,UAAU,gBACZf,EAASgB,KAAI,SAAAC,GAAO,OACnB,6BAASC,IAAKD,EAAQE,KACpB,gCAASF,EAAQG,OACjB,2BAAIH,EAAQI,aACZ,kBAAC,IAAD,CAAMC,GAAE,oBAAeL,EAAQE,MAA/B,eAGJ,yBAAKJ,UAAU,WACb,4BAAQQ,SAAmB,IAATrB,EAAYsB,QAASV,KAAKJ,UAA5C,YACA,4BAAQa,SAAUrB,IAASD,EAAYY,MAAOW,QAASV,KAAKF,UAA5D,oB,GA9FwBa,cCDbC,G,kNAInB3B,MACA,CACEkB,QAAS,I,2LAODxB,EAAOqB,KAAKa,MAAMC,MAAMC,OAAxBpC,G,SAEeC,EAAIW,IAAJ,oBAAqBZ,I,OAAtCa,E,OAINQ,KAAKL,SACH,CACEQ,QAASX,EAASC,O,qIAcxB,IAEUU,EAAYH,KAAKf,MAAjBkB,QAER,OACE,yBAAKF,UAAU,gBACb,4BAAKE,EAAQG,OACb,2BAAIH,EAAQI,aACZ,mCAAQ,uBAAGS,KAAMb,EAAQc,KAAMd,EAAQc,W,GA3CVN,cCyBtBO,EATA,kBACb,kBAAC,IAAD,CAAeC,SAAS,kBACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,gBAAgBC,UAAWV,OCN9BW,EAPH,kBACV,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJgBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b5bdec4.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./styles.css\";\n\n//Cria um componente sem estado (stateless component)\nconst Header = () => <header id=\"main-header\">JSHunt</header>;\n\nexport default Header;","import axios from \"axios\";\n\n//Configuração do axios\nconst api = axios.create(\n  {\n    baseURL: \"https://rocketseat-node.herokuapp.com/api\"\n  });\n\nexport default api;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport api from \"../../services/api\";\n\nimport \"./styles.css\"\n\n//Exporta um componente com estado\nexport default class Main extends Component\n{\n  //Objeto que armazena estado do componente, os itens representam \n  //\"propriedades do estado\" do componente do arquivo\n  state = \n  {\n    products: [],\n    productInfo: {},\n    page: 1\n  };\n\n  //Executa assim que o componente for montado em tela\n  componentDidMount()\n  {\n    this.loadProducts();\n  }\n\n  //Métodos proprietário -> Usa-se arrow functions p/ que o método\n  //esteja no mesmo escopo que os outros da classe (this)\n\n  //Carrega a lista de registros da API configurada\n  loadProducts = async (page = 1) =>\n  {\n    const response = await api.get(`/products?page=${page}`);\n\n    //Desestrutura a resposta da API, usando o operador \"rest\"\n    //p/ separar o docs de todo o restante da resposta\n    const { docs, ...productInfo } = response.data;\n\n    //Modifica o estado do componente, passando um objeto com\n    //os itens a serem alterados\n    this.setState(\n      {\n        products: docs,\n        productInfo,\n        page\n      });\n  }\n\n  //Retrocede p/ página de registros anterior\n  prevPage = () =>\n  {\n    //Desestrutura o estado do componente\n    const { page } = this.state;\n\n    //Se for a primeira página, não faz nada\n    if (page === 1) return;\n\n    const pageNumber = page - 1;\n\n    this.loadProducts(pageNumber);\n  }\n\n  //Avança p/ próxima página de registros\n  nextPage = () =>\n  {\n    //Desestrutura o estado do componente\n    const { productInfo, page } = this.state;\n\n    //Se o número da página for o último, não faz nada\n    if (page === productInfo.pages) return;\n    \n    const pageNumber = page + 1;\n\n    this.loadProducts(pageNumber);\n  }\n\n  /*\n   * Renderiza o componente usando JSX, utilizando os itens armazenados\n   * no estado do componente através do this.state\n   * \n   * Este método monitora as alterações do estado, atualizando a DOM\n   * ao identificar qualquer modificação\n   * \n   * Em JSX, {} permite a execução de códigos JS\n   * \n   * - Link: indica qual rota deve ser acessada\n   */\n   render()\n  {\n    //Desestrutura o estado do componente\n    const { products, productInfo, page } = this.state;\n\n    return (\n      <div className=\"product-list\">\n        {products.map(product => (\n          <article key={product._id}>\n            <strong>{product.title}</strong>\n            <p>{product.description}</p>\n            <Link to={`/products/${product._id}`}>Acessar</Link>\n          </article>\n        ))}\n        <div className=\"actions\">\n          <button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\n          <button disabled={page === productInfo.pages} onClick={this.nextPage}>Próximo</button>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport api from \"../../services/api\"\n\nimport \"./styles.css\"\n\n//Exporta um componente com estado\nexport default class Product extends Component\n{\n  //Objeto que armazena estado do componente, os itens representam \n  //\"propriedades\" do componente\n  state = \n  {\n    product: {}\n  };\n\n  //Executa assim que o componente for montado em tela\n  async componentDidMount()\n  {\n    //Desestrutura os parâmetros passados na rota\n    const { id } = this.props.match.params;\n\n    const response = await api.get(`/products/${id}`);\n\n    //Modifica o estado do componente, passando um objeto com\n    //os itens a serem alterados\n    this.setState(\n      {\n        product: response.data\n      });\n  }\n\n  /*\n   * Renderiza o componente usando JSX, em que p/ utilizar os itens\n   * armazenados no estado do componente, usa-se {this.state}\n   * \n   * Este método monitora as alterações do estado, atualizando a DOM\n   * ao identificar qualquer modificação\n   * \n   * Em JSX, {} permite a execução de códigos JS\n   */\n  render()\n  {\n    //Desestrutura o estado do componente\n    const { product } = this.state;\n\n    return (\n      <div className=\"product-info\">\n        <h1>{product.title}</h1>\n        <p>{product.description}</p>\n        <p>URL: <a href={product.url}>{product.url}</a></p>\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n//Importa os componentes necessários\nimport Main from \"./pages/main\";\nimport Product from \"./pages/product\";\n\n/* \n * Cria roteador de rotas em JSX p/ acesso das páginas (componentes) do aplicativo:\n * - BrowserRouter: indica que as rotas serão chamadas através do browser\n *   - basename: indica endereço base padrão p/ todas as rotas, está configurado p/ utilizar \n * o GitHub Pages (https://github.com/rafgraph/spa-github-pages#usage-instructions), mas\n * a propriedade pode ser removida no localhost\n * \n * - Switch: permite que apenas uma rota seja chamada ao mesmo tempo, dessa forma\n * apenas um componente é carregado por rota\n * \n * - Route: indica a rota da página (componente)\n *   - exact: apenas \"/\" redireciona qualquer endereço começando com \"/\" para essa rota, \n * porém propriedade \"exact\" indica que aquele é caminho exato da rota, eliminando o \n * comportamento anterior\n */\nconst Routes = () => (\n  <BrowserRouter basename=\"/huntweb/build\">\n    <Switch>\n      <Route exact path=\"/\" component={Main} />\n      <Route path=\"/products/:id\" component={Product} />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Routes;","import React from 'react';\n\nimport \"./styles.css\";\n\n//Importa os componentes necessários\nimport Header from \"./components/Header\";\nimport Routes from \"./routes\";\n\n/*\n * Cria componente sem estado com JSX que será renderizado no index.js\n * \n * - Componente: conjunto de lógica, estrutura e estilização\n */\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Renderiza componente na DOM através do elemento #root\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}